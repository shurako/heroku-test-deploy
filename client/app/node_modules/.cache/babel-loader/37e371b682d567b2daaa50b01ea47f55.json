{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patry\\\\OneDrive\\\\Pulpit\\\\DB learn\\\\client\\\\app\\\\src\\\\components\\\\board\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Note from '../Note';\nimport './board.css';\nimport axios from 'axios';\nimport AddNoteForm from './AddNoteForm';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(props) {\n  _s();\n\n  const {\n    _id,\n    title\n  } = props.board;\n  const [board, setBoard] = useState();\n  const [boardTitle, setBoardTitle] = useState(title);\n  const [noteTitle, setNoteTitle] = useState();\n  const [test, setTest] = useState();\n  const ref = useRef();\n\n  const fetchNotes = async () => {\n    const notes = await axios.get(`/boards/${_id}`);\n    setTest(notes.data.content);\n  };\n\n  useEffect(() => {\n    fetchNotes();\n    setBoard(props.board);\n  }, []); // useEffect(() => {\n  //     const patchBoard = async () => {\n  //         await axios.patch(`/boards/updateTitle/${_id}`, { title: board.title })\n  //         await axios.patch(`/boards/updateTitle/${_id}`, { content: board.content})\n  //     }\n  //     const setNewBoards = async () => {\n  //         const newBoards = await axios.get('/boards')\n  //         props.setBoards(newBoards.data)\n  //     }\n  //     board && patchBoard()\n  //     setNewBoards()\n  // }, [board])\n\n  const createNote = async () => {\n    const newNote = await axios.post('/notes', {\n      title: noteTitle\n    });\n    const res = await axios.patch(`/boards/createNote/${_id}`, {\n      content: [...test, newNote.data]\n    });\n    setTest([...test, newNote.data]);\n  };\n\n  const deleteNote = async id => {\n    const filteredNotes = test.filter(note => note._id !== id);\n    await axios.patch(`/boards/createNote/${_id}`, {\n      content: filteredNotes\n    });\n    setTest(filteredNotes);\n  };\n\n  const patchBoardTitle = e => {\n    e.preventDefault();\n    setBoard({ ...board,\n      title: boardTitle\n    });\n  };\n\n  const handleOnDragEnd = result => {\n    console.log(result);\n    if (!result.destination) return;\n\n    if (result.source.draggableId !== result.destination.draggableId) {\n      // const source = test.find(column => column.id == result.source.droppableId)\n      // const dest = test.find(column => column.id == result.destination.droppableId)\n      // const [removed] = source.data.splice(result.source.index, 1)\n      // dest.data.splice(result.destination.index, 0, removed)\n      // console.log(removed, dest, test[1])\n      console.log('dupa');\n    } else {\n      const source = test;\n      const [reorderedItem] = source.splice(result.source.index, 1);\n      source.splice(result.destination.index, 0, reorderedItem);\n      console.log(reorderedItem, source, board);\n      setBoard({ ...board,\n        title: 'dupa'\n      });\n      console.log(reorderedItem, source, board);\n    }\n  };\n\n  const renderNotes = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: handleOnDragEnd,\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: _id,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", { ...provided.droppableProps,\n            ref: provided.innerRef,\n            children: test && test.map((note, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: note._id,\n              index: index,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", { ...provided.dragHandleProps,\n                ...provided.draggableProps,\n                ref: provided.innerRef,\n                children: [/*#__PURE__*/_jsxDEV(Note, {\n                  fetchNotes: fetchNotes,\n                  board: board,\n                  setBoard: setBoard,\n                  boardId: _id,\n                  boardTitle: boardTitle,\n                  deleteNote: deleteNote,\n                  note: note\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 49\n                }, this), provided.placeholder]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 45\n              }, this)\n            }, note._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 29\n          }, this)\n        }, _id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boardInput\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => patchBoardTitle(e),\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Board\",\n          onChange: e => {\n            setBoardTitle(e.target.value);\n          },\n          value: boardTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), renderNotes(), /*#__PURE__*/_jsxDEV(AddNoteForm, {\n      noteTitle: noteTitle,\n      setNoteTitle: setNoteTitle,\n      createNote: createNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"/pSYqXCPijnks0+gaHft+6rmg8A=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/patry/OneDrive/Pulpit/DB learn/client/app/src/components/board/Board.js"],"names":["React","useState","useEffect","useRef","Note","axios","AddNoteForm","DragDropContext","Draggable","Droppable","Board","props","_id","title","board","setBoard","boardTitle","setBoardTitle","noteTitle","setNoteTitle","test","setTest","ref","fetchNotes","notes","get","data","content","createNote","newNote","post","res","patch","deleteNote","id","filteredNotes","filter","note","patchBoardTitle","e","preventDefault","handleOnDragEnd","result","console","log","destination","source","draggableId","reorderedItem","splice","index","renderNotes","provided","droppableProps","innerRef","map","dragHandleProps","draggableProps","placeholder","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport Note from '../Note'\r\nimport './board.css'\r\nimport axios from 'axios'\r\nimport AddNoteForm from './AddNoteForm'\r\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd'\r\n\r\nfunction Board(props) {\r\n    const { _id, title, } = props.board\r\n    const [board, setBoard] = useState()\r\n    const [boardTitle, setBoardTitle] = useState(title)\r\n    const [noteTitle, setNoteTitle] = useState()\r\n    const [test, setTest] = useState()\r\n    const ref = useRef()\r\n\r\n    const fetchNotes = async () => {\r\n        const notes = await axios.get(`/boards/${_id}`)\r\n        setTest(notes.data.content)\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchNotes()\r\n        setBoard(props.board)\r\n    }, [])\r\n\r\n    // useEffect(() => {\r\n    //     const patchBoard = async () => {\r\n    //         await axios.patch(`/boards/updateTitle/${_id}`, { title: board.title })\r\n    //         await axios.patch(`/boards/updateTitle/${_id}`, { content: board.content})\r\n    //     }\r\n\r\n    //     const setNewBoards = async () => {\r\n    //         const newBoards = await axios.get('/boards')\r\n    //         props.setBoards(newBoards.data)\r\n    //     }\r\n\r\n    //     board && patchBoard()\r\n    //     setNewBoards()\r\n    // }, [board])\r\n\r\n    \r\n\r\n    const createNote = async () => {\r\n\r\n        const newNote = await axios.post('/notes', { title: noteTitle })\r\n        const res = await axios.patch(`/boards/createNote/${_id}`, { content: [...test, newNote.data] })\r\n        setTest([...test, newNote.data])\r\n\r\n    }\r\n\r\n    const deleteNote = async (id) => {\r\n        const filteredNotes = test.filter(note => note._id !== id)\r\n        await axios.patch(`/boards/createNote/${_id}`, { content: filteredNotes })\r\n        setTest(filteredNotes)\r\n    }\r\n\r\n    const patchBoardTitle = (e) => {\r\n\r\n        e.preventDefault()\r\n        setBoard({ ...board, title: boardTitle })\r\n    }\r\n\r\n    const handleOnDragEnd = (result) => {\r\n        console.log(result)\r\n\r\n        if (!result.destination) return;\r\n        if (result.source.draggableId !== result.destination.draggableId) {\r\n            // const source = test.find(column => column.id == result.source.droppableId)\r\n            // const dest = test.find(column => column.id == result.destination.droppableId)\r\n            // const [removed] = source.data.splice(result.source.index, 1)\r\n            // dest.data.splice(result.destination.index, 0, removed)\r\n            // console.log(removed, dest, test[1])\r\n            console.log('dupa')\r\n        }\r\n\r\n        else {\r\n            const source = test\r\n            const [reorderedItem] = source.splice(result.source.index, 1)\r\n            source.splice(result.destination.index, 0, reorderedItem)\r\n            console.log(reorderedItem, source, board)\r\n            setBoard({\r\n                ...board,\r\n                title: 'dupa'\r\n            })\r\n            console.log(reorderedItem, source, board)\r\n        }\r\n\r\n        \r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const renderNotes = () => {\r\n        return (\r\n            <div>\r\n                <DragDropContext onDragEnd = {handleOnDragEnd}>\r\n                    <Droppable droppableId={_id} key={_id} >\r\n                        {provided => (\r\n                            <div {...provided.droppableProps} ref={provided.innerRef} >\r\n                                {test && test.map((note, index) =>\r\n                                    <Draggable draggableId={note._id} index={index} key={note._id}>\r\n                                        {provided => (\r\n                                            <div {...provided.dragHandleProps} {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                <Note fetchNotes={fetchNotes} board={board} setBoard={setBoard} boardId={_id} boardTitle={boardTitle} deleteNote={deleteNote} note={note} />\r\n                                                {provided.placeholder}\r\n                                            </div>\r\n                                        )}\r\n                                        \r\n                                    </Draggable>\r\n                                )}\r\n\r\n\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='board' >\r\n            <div className='boardInput'>\r\n                <form onSubmit={e => patchBoardTitle(e)}>\r\n                    <input placeholder='Board' onChange={(e) => { setBoardTitle(e.target.value) }} value={boardTitle} />\r\n                </form>\r\n            </div>\r\n            {renderNotes()}\r\n            <AddNoteForm noteTitle={noteTitle} setNoteTitle={setNoteTitle} createNote={createNote} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board\r\n"]},"metadata":{},"sourceType":"module"}