{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patry\\\\OneDrive\\\\Pulpit\\\\DB learn\\\\client\\\\app\\\\src\\\\pages\\\\Test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Droppable, DragDropContext, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Test() {\n  _s();\n\n  const data1 = [{\n    id: '1',\n    data: 1\n  }, {\n    id: '2',\n    data: 2\n  }, {\n    id: '3',\n    data: 3\n  }];\n  const data2 = [4, 5, 6];\n  const [data, setData] = useState(data1);\n\n  const handleOnDragEnd = result => {\n    if (!result.destination) return;\n    const items = data;\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    setData(items);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => handleOnDragEnd(result),\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"characters\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"ul\", { ...provided.droppableProps,\n          ref: provided.innerRef,\n          children: [data.map((item, i) => {\n            return /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: item.id,\n              index: i,\n              children: provided => /*#__PURE__*/_jsxDEV(\"li\", { ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                ref: provided.innerRef,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    height: '50px',\n                    width: '50px'\n                  },\n                  children: item.data\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 33,\n                  columnNumber: 133\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 33,\n                columnNumber: 45\n              }, this)\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 37\n            }, this);\n          }), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Test, \"qFMSZFMdgaKGRR7TCwENdXRaejw=\");\n\n_c = Test;\nexport default Test; // return items.map((item, index) => (\n//     <Draggable\n//       // adding a key is important!\n//       key={item.id}\n//       draggableId={item.id}\n//       index={index}\n//     >\n//       {(provided, snapshot) => (\n//         <div\n//           ref={provided.innerRef}\n//           {...provided.draggableProps}\n//           {...provided.dragHandleProps}\n//         >\n//           {item.content}\n//         </div>\n//       )}\n//     </Draggable>\n//   ));\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/Users/patry/OneDrive/Pulpit/DB learn/client/app/src/pages/Test.js"],"names":["React","useState","Droppable","DragDropContext","Draggable","Test","data1","id","data","data2","setData","handleOnDragEnd","result","destination","items","reorderedItem","splice","source","index","provided","droppableProps","innerRef","map","item","i","draggableProps","dragHandleProps","height","width","placeholder"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,SAArC,QAAsD,qBAAtD;;;AACA,SAASC,IAAT,GAAgB;AAAA;;AAEZ,QAAMC,KAAK,GAAG,CACV;AAAEC,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE;AAAjB,GADU,EAEV;AAAED,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE;AAAjB,GAFU,EAGV;AAAED,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE;AAAjB,GAHU,CAAd;AAKA,QAAMC,KAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAd;AAEA,QAAM,CAACD,IAAD,EAAOE,OAAP,IAAkBT,QAAQ,CAACK,KAAD,CAAhC;;AAEA,QAAMK,eAAe,GAAIC,MAAD,IAAY;AAChC,QAAG,CAACA,MAAM,CAACC,WAAX,EAAwB;AACxB,UAAMC,KAAK,GAAGN,IAAd;AACA,UAAM,CAACO,aAAD,IAAmBD,KAAK,CAACE,MAAN,CAAaJ,MAAM,CAACK,MAAP,CAAcC,KAA3B,EAAkC,CAAlC,CAAzB;AACAJ,IAAAA,KAAK,CAACE,MAAN,CAAaJ,MAAM,CAACC,WAAP,CAAmBK,KAAhC,EAAuC,CAAvC,EAA0CH,aAA1C;AAEAL,IAAAA,OAAO,CAACI,KAAD,CAAP;AACH,GAPD;;AASA,sBACI;AAAA,2BACI,QAAC,eAAD;AAAiB,MAAA,SAAS,EAAEF,MAAM,IAAID,eAAe,CAACC,MAAD,CAArD;AAAA,6BACI,QAAC,SAAD;AAAW,QAAA,WAAW,EAAC,YAAvB;AAAA,kBACGO,QAAD,iBACM,mBAASA,QAAQ,CAACC,cAAlB;AAAkC,UAAA,GAAG,EAAED,QAAQ,CAACE,QAAhD;AAAA,qBACKb,IAAI,CAACc,GAAL,CAAS,CAACC,IAAD,EAAOC,CAAP,KAAa;AACnB,gCACI,QAAC,SAAD;AAAyB,cAAA,WAAW,EAAED,IAAI,CAAChB,EAA3C;AAA+C,cAAA,KAAK,EAAEiB,CAAtD;AAAA,wBACML,QAAD,iBACG,mBAAQA,QAAQ,CAACM,cAAjB;AAAA,mBAAqCN,QAAQ,CAACO,eAA9C;AAA+D,gBAAA,GAAG,EAAEP,QAAQ,CAACE,QAA7E;AAAA,uCAAwF;AAAK,kBAAA,KAAK,EAAE;AAAEM,oBAAAA,MAAM,EAAE,MAAV;AAAkBC,oBAAAA,KAAK,EAAE;AAAzB,mBAAZ;AAAA,4BAAiDL,IAAI,CAACf;AAAtD;AAAA;AAAA;AAAA;AAAA;AAAxF;AAAA;AAAA;AAAA;AAAA;AAFR,eAAgBe,IAAI,CAAChB,EAArB;AAAA;AAAA;AAAA;AAAA,oBADJ;AAMH,WAPA,CADL,EAUKY,QAAQ,CAACU,WAVd;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH;;GA1CQxB,I;;KAAAA,I;AA4CT,eAAeA,IAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {useState} from 'react'\r\nimport { Droppable, DragDropContext, Draggable } from 'react-beautiful-dnd'\r\nfunction Test() {\r\n\r\n    const data1 = [\r\n        { id: '1', data: 1 },\r\n        { id: '2', data: 2 },\r\n        { id: '3', data: 3 }\r\n    ]\r\n    const data2 = [4, 5, 6]\r\n\r\n    const [data, setData] = useState(data1)\r\n\r\n    const handleOnDragEnd = (result) => {\r\n        if(!result.destination) return;\r\n        const items = data;\r\n        const [reorderedItem ] = items.splice(result.source.index, 1)\r\n        items.splice(result.destination.index, 0, reorderedItem)\r\n\r\n        setData(items)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <DragDropContext onDragEnd={result => handleOnDragEnd(result)} >\r\n                <Droppable droppableId=\"characters\">\r\n                 {(provided) => (\r\n                        <ul  {...provided.droppableProps} ref={provided.innerRef} >\r\n                            {data.map((item, i) => {\r\n                                return (\r\n                                    <Draggable key={item.id} draggableId={item.id} index={i}>\r\n                                        {(provided) => (\r\n                                            <li {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef} ><div style={{ height: '50px', width: '50px' }} >{item.data}</div></li>\r\n                                        )}\r\n                                    </Draggable>)\r\n                            }\r\n                            )}\r\n                            {provided.placeholder}\r\n                        </ul>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Test\r\n\r\n// return items.map((item, index) => (\r\n//     <Draggable\r\n//       // adding a key is important!\r\n//       key={item.id}\r\n//       draggableId={item.id}\r\n//       index={index}\r\n//     >\r\n//       {(provided, snapshot) => (\r\n//         <div\r\n//           ref={provided.innerRef}\r\n//           {...provided.draggableProps}\r\n//           {...provided.dragHandleProps}\r\n//         >\r\n//           {item.content}\r\n//         </div>\r\n//       )}\r\n//     </Draggable>\r\n//   ));\r\n\r\n"]},"metadata":{},"sourceType":"module"}