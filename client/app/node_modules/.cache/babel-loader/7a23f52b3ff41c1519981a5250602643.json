{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patry\\\\OneDrive\\\\Pulpit\\\\DB learn\\\\client\\\\app\\\\src\\\\pages\\\\Test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Droppable, DragDropContext, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Test() {\n  _s();\n\n  const data1 = [{\n    id: '1',\n    data: 1\n  }, {\n    id: '2',\n    data: 2\n  }, {\n    id: '3',\n    data: 3\n  }];\n  const data2 = [{\n    id: '4',\n    data: 4\n  }, {\n    id: '5',\n    data: 5\n  }, {\n    id: '6',\n    data: 6\n  }];\n  const [data, setData] = useState(data1);\n  const [dataa, setDataa] = useState(data2);\n  const [columns, setColumns] = useState({\n    ['1']: {\n      data: data1\n    },\n    ['2']: {\n      data: data2\n    }\n  });\n\n  const handleOnDragEnd = result => {\n    console.log(result);\n    if (!result.destination) return;\n\n    if (result.source.draggableId !== result.destination.droppableId) {\n      const sourceColumn = columns[result.source.droppableId];\n      const destColumn = columns[result.destination.droppableId];\n      const sourceItems = [...sourceColumn.items];\n      const destItems = [...destColumn.items];\n      const [removed] = sourceItems.splice(result.source.index, 1);\n      destItems.splice(destination.index, 0, removed);\n      setColumns({ ...columns,\n        [source.droppableId]: { ...sourceColumn,\n          items: sourceItems\n        },\n        [destination.droppableId]: { ...destColumn,\n          items: destItems\n        }\n      });\n    }\n\n    const items = data;\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    setData(items);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleOnDragEnd,\n      children: Object.entries(columns).map(([id, column]) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Droppable, {\n            droppableId: id,\n            children: provided => {\n              return /*#__PURE__*/_jsxDEV(\"div\", { ...provided.droppableProps,\n                ref: provided.innerRef,\n                children: column.data.map((item, index) => {\n                  return /*#__PURE__*/_jsxDEV(Draggable, {\n                    draggableId: item.id,\n                    index: index,\n                    children: provided => {\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        ref: provided.innerRef,\n                        ...provided.dragHandleProps,\n                        ...provided.draggableProps,\n                        children: item.data\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 80,\n                        columnNumber: 69\n                      }, this);\n                    }\n                  }, item.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 77,\n                    columnNumber: 57\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 41\n              }, this);\n            }\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Test, \"C9evlE0HPDknoP9X6slPzNn0uUk=\");\n\n_c = Test;\nexport default Test; // return items.map((item, index) => (\n//     <Draggable\n//       // adding a key is important!\n//       key={item.id}\n//       draggableId={item.id}\n//       index={index}\n//     >\n//       {(provided, snapshot) => (\n//         <div\n//           ref={provided.innerRef}\n//           {...provided.draggableProps}\n//           {...provided.dragHandleProps}\n//         >\n//           {item.content}\n//         </div>\n//       )}\n//     </Draggable>\n//   ));\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/Users/patry/OneDrive/Pulpit/DB learn/client/app/src/pages/Test.js"],"names":["React","useState","Droppable","DragDropContext","Draggable","Test","data1","id","data","data2","setData","dataa","setDataa","columns","setColumns","handleOnDragEnd","result","console","log","destination","source","draggableId","droppableId","sourceColumn","destColumn","sourceItems","items","destItems","removed","splice","index","reorderedItem","Object","entries","map","column","provided","droppableProps","innerRef","item","dragHandleProps","draggableProps"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport { Droppable, DragDropContext, Draggable } from 'react-beautiful-dnd'\r\nfunction Test() {\r\n\r\n    const data1 = [\r\n        { id: '1', data: 1 },\r\n        { id: '2', data: 2 },\r\n        { id: '3', data: 3 }\r\n    ]\r\n    const data2 = [\r\n        { id: '4', data: 4 },\r\n        { id: '5', data: 5 },\r\n        { id: '6', data: 6 }\r\n    ]\r\n\r\n    const [data, setData] = useState(data1)\r\n    const [dataa, setDataa] = useState(data2)\r\n\r\n    const [columns, setColumns] = useState({\r\n        ['1'] : {\r\n            data: data1\r\n        },\r\n        ['2'] : {\r\n            data: data2\r\n        }\r\n    })\r\n\r\n    const handleOnDragEnd = (result) => {\r\n        console.log(result  )\r\n        if(!result.destination) return;\r\n        if(result.source.draggableId !== result.destination.droppableId){\r\n            const sourceColumn = columns[result.source.droppableId]\r\n            const destColumn = columns[result.destination.droppableId]\r\n            const sourceItems = [...sourceColumn.items]\r\n            const destItems = [...destColumn.items]\r\n            const [removed] = sourceItems.splice(result.source.index, 1 )   \r\n            destItems.splice(destination.index, 0, removed)\r\n\r\n            setColumns({\r\n                ...columns,\r\n                [source.droppableId] : {\r\n                    ...sourceColumn,\r\n                    items : sourceItems\r\n                },\r\n                [destination.droppableId] : {\r\n                    ...destColumn,\r\n                    items: destItems\r\n                }\r\n            })\r\n               \r\n            \r\n        }\r\n\r\n        const items = data;\r\n        const [reorderedItem ] = items.splice(result.source.index, 1)\r\n        items.splice(result.destination.index, 0, reorderedItem)\r\n\r\n        setData(items)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <DragDropContext onDragEnd={handleOnDragEnd} >\r\n                {Object.entries(columns).map(([id, column]) => {\r\n                    return(\r\n                        <div>\r\n                            <Droppable droppableId = {id} key = {id}>\r\n                                {(provided) => {\r\n                                    return(\r\n                                        <div\r\n                                        {...provided.droppableProps}\r\n                                        ref = {provided.innerRef}\r\n                                        >\r\n                                            {\r\n                                                column.data.map( (item, index) => {\r\n                                                    return(\r\n                                                        <Draggable key = {item.id} draggableId = {item.id} index = {index}>\r\n                                                            {(provided) => {\r\n                                                                return(\r\n                                                                    <div ref = {provided.innerRef} {...provided.dragHandleProps} {...provided.draggableProps} >\r\n                                                                        {item.data}\r\n                                                                    </div>\r\n                                                                )\r\n                                                            } }\r\n                                                        </Draggable>\r\n                                                    )\r\n                                                } )\r\n                                            }\r\n                                        </div>\r\n                                    )\r\n                                }}\r\n                            </Droppable>\r\n                        </div>\r\n                    )\r\n                } )}\r\n                \r\n            </DragDropContext>\r\n\r\n            \r\n\r\n                        \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Test\r\n\r\n// return items.map((item, index) => (\r\n//     <Draggable\r\n//       // adding a key is important!\r\n//       key={item.id}\r\n//       draggableId={item.id}\r\n//       index={index}\r\n//     >\r\n//       {(provided, snapshot) => (\r\n//         <div\r\n//           ref={provided.innerRef}\r\n//           {...provided.draggableProps}\r\n//           {...provided.dragHandleProps}\r\n//         >\r\n//           {item.content}\r\n//         </div>\r\n//       )}\r\n//     </Draggable>\r\n//   ));\r\n\r\n"]},"metadata":{},"sourceType":"module"}