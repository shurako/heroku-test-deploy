{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patry\\\\OneDrive\\\\Pulpit\\\\DB learn\\\\client\\\\app\\\\src\\\\pages\\\\Test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Droppable, DragDropContext, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Test() {\n  _s();\n\n  const data1 = [{\n    id: '1',\n    data: 1\n  }, {\n    id: '2',\n    data: 2\n  }, {\n    id: '7',\n    data: 3\n  }, {\n    id: '10',\n    data: 10\n  }];\n  const data2 = [{\n    id: '4',\n    data: 4\n  }, {\n    id: '5',\n    data: 5\n  }, {\n    id: '6',\n    data: 6\n  }];\n  const [data, setData] = useState(data1);\n  const [dataa, setDataa] = useState(data2);\n  const [columns, setColumns] = useState({\n    ['1']: {\n      data: data1\n    },\n    ['2']: {\n      data: data2\n    }\n  });\n  const [test, setTest] = useState([{\n    id: '100',\n    data: data1\n  }, {\n    id: '200',\n    data: data2\n  }]); // const handleOnDragEnd = (result) => {\n  //     console.log(result  )\n  //     if(!result.destination) return;\n  //     if(result.source.draggableId !== result.destination.droppableId){\n  //         const source = test.find( column => column.id == result.source.droppableId )\n  //         const dest = test.find( column => column.id == result.destination.droppableId )\n  //         const [removed] = source.data.splice(result.source.index, 1)\n  //         dest.data.splice(result.destination.index, 0, removed )\n  //         console.log(removed, dest, test[1])\n  //     }\n  //     else{\n  //         const source = test.find( column => column.id == result.source.droppableId )\n  //         const [reorderedItem ] = source.data.splice(result.source.index, 1)\n  //         source.data.splice(result.destination.index, 0, reorderedItem)\n  //     }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleOnDragEnd,\n      children: test.map(column => /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: column.id,\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", { ...provided.droppableProps,\n          ref: provided.innerRef,\n          children: [column.data.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: item.id,\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"test\",\n              ...provided.dragHandleProps,\n              ...provided.draggableProps,\n              ref: provided.innerRef,\n              children: item.data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 37\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 62\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 24\n        }, this)\n      }, column.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 36\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Test, \"yuuqBot+fRH/EX6NGfZsAY5oiwE=\");\n\n_c = Test;\nexport default Test; // return items.map((item, index) => (\n//     <Draggable\n//       // adding a key is important!\n//       key={item.id}\n//       draggableId={item.id}\n//       index={index}\n//     >\n//       {(provided, snapshot) => (\n//         <div\n//           ref={provided.innerRef}\n//           {...provided.draggableProps}\n//           {...provided.dragHandleProps}\n//         >\n//           {item.content}\n//         </div>\n//       )}\n//     </Draggable>\n//   ));\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/Users/patry/OneDrive/Pulpit/DB learn/client/app/src/pages/Test.js"],"names":["React","useState","Droppable","DragDropContext","Draggable","Test","data1","id","data","data2","setData","dataa","setDataa","columns","setColumns","test","setTest","display","handleOnDragEnd","map","column","provided","droppableProps","innerRef","item","index","dragHandleProps","draggableProps","placeholder"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport { Droppable, DragDropContext, Draggable } from 'react-beautiful-dnd'\r\nfunction Test() {\r\n\r\n    const data1 = [\r\n        { id: '1', data: 1 },\r\n        { id: '2', data: 2 },\r\n        { id: '7', data: 3 },\r\n        { id: '10', data: 10 },\r\n    ]\r\n    const data2 = [\r\n        { id: '4', data: 4 },\r\n        { id: '5', data: 5 },\r\n        { id: '6', data: 6 }\r\n    ]\r\n\r\n    const [data, setData] = useState(data1)\r\n    const [dataa, setDataa] = useState(data2)\r\n\r\n    const [columns, setColumns] = useState({\r\n        ['1'] : {\r\n            data: data1\r\n        },\r\n        ['2'] : {\r\n            data: data2\r\n        }\r\n    })\r\n\r\nconst [test, setTest] = useState([\r\n    {   id: '100',\r\n        data : data1},\r\n    {   id: '200',\r\n        data: data2}\r\n])\r\n\r\n    // const handleOnDragEnd = (result) => {\r\n    //     console.log(result  )\r\n        \r\n\r\n    //     if(!result.destination) return;\r\n    //     if(result.source.draggableId !== result.destination.droppableId){\r\n    //         const source = test.find( column => column.id == result.source.droppableId )\r\n    //         const dest = test.find( column => column.id == result.destination.droppableId )\r\n    //         const [removed] = source.data.splice(result.source.index, 1)\r\n    //         dest.data.splice(result.destination.index, 0, removed )\r\n    //         console.log(removed, dest, test[1])\r\n\r\n            \r\n            \r\n            \r\n    //     }\r\n\r\n    //     else{\r\n    //         const source = test.find( column => column.id == result.source.droppableId )\r\n\r\n    //         const [reorderedItem ] = source.data.splice(result.source.index, 1)\r\n    //         source.data.splice(result.destination.index, 0, reorderedItem)\r\n    //     }\r\n        \r\n\r\n    // }\r\n\r\n    return (\r\n        <div style = {{display: 'flex'}}>\r\n            <DragDropContext onDragEnd={handleOnDragEnd} >\r\n               {test.map(column => <Droppable key ={column.id} droppableId = {column.id}>\r\n                   {provided => (\r\n                       <div\r\n                        {...provided.droppableProps}\r\n                        ref ={provided.innerRef}\r\n                       >\r\n                           {column.data.map((item, index) => <Draggable key = {item.id } draggableId = {item.id} index = {index}> \r\n                                {provided => (\r\n                                    <div className = 'test' {...provided.dragHandleProps} {...provided.draggableProps} ref = {provided.innerRef} >\r\n                                    {item.data}\r\n                                </div>\r\n                                )}\r\n                           </Draggable>)}\r\n                           {provided.placeholder}\r\n                       </div>\r\n                       \r\n                   )}\r\n               </Droppable>) }\r\n     \r\n                \r\n            </DragDropContext>\r\n\r\n            \r\n\r\n                        \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Test\r\n\r\n// return items.map((item, index) => (\r\n//     <Draggable\r\n//       // adding a key is important!\r\n//       key={item.id}\r\n//       draggableId={item.id}\r\n//       index={index}\r\n//     >\r\n//       {(provided, snapshot) => (\r\n//         <div\r\n//           ref={provided.innerRef}\r\n//           {...provided.draggableProps}\r\n//           {...provided.dragHandleProps}\r\n//         >\r\n//           {item.content}\r\n//         </div>\r\n//       )}\r\n//     </Draggable>\r\n//   ));\r\n\r\n"]},"metadata":{},"sourceType":"module"}