{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patry\\\\OneDrive\\\\Pulpit\\\\DB learn\\\\client\\\\app\\\\src\\\\pages\\\\Test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Droppable, DragDropContext, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Test() {\n  _s();\n\n  const data1 = [{\n    id: '1',\n    data: 1\n  }, {\n    id: '2',\n    data: 2\n  }, {\n    id: '3',\n    data: 3\n  }];\n  const data2 = [{\n    id: '4',\n    data: 4\n  }, {\n    id: '5',\n    data: 5\n  }, {\n    id: '6',\n    data: 6\n  }];\n  const [data, setData] = useState(data1);\n  const [dataa, setDataa] = useState(data2);\n  const [columns, setColumns] = useState({\n    ['1']: {\n      data: data1\n    },\n    ['2']: {\n      data: data2\n    }\n  });\n\n  const handleOnDragEnd = result => {\n    console.log(result);\n    if (!result.destination) return;\n\n    if (result.source.draggableId !== result.destination.droppableId) {}\n\n    const items = data;\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    setData(items);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleOnDragEnd,\n      children: Object.entries(columns).map(([id, column]) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Droppable, {\n            droppableId: id,\n            children: provided => {\n              return /*#__PURE__*/_jsxDEV(\"div\", { ...provided.droppableProps,\n                ref: provided.innerRef,\n                children: column.data.map(item => {\n                  provided => {\n                    return /*#__PURE__*/_jsxDEV(\"div\", { ...provided.droppableProps,\n                      ...provided.dragHandleProps,\n                      ref: provided.innerRef,\n                      children: item.data\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 61,\n                      columnNumber: 61\n                    }, this);\n                  };\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 41\n              }, this);\n            }\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Test, \"C9evlE0HPDknoP9X6slPzNn0uUk=\");\n\n_c = Test;\nexport default Test; // return items.map((item, index) => (\n//     <Draggable\n//       // adding a key is important!\n//       key={item.id}\n//       draggableId={item.id}\n//       index={index}\n//     >\n//       {(provided, snapshot) => (\n//         <div\n//           ref={provided.innerRef}\n//           {...provided.draggableProps}\n//           {...provided.dragHandleProps}\n//         >\n//           {item.content}\n//         </div>\n//       )}\n//     </Draggable>\n//   ));\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/Users/patry/OneDrive/Pulpit/DB learn/client/app/src/pages/Test.js"],"names":["React","useState","Droppable","DragDropContext","Draggable","Test","data1","id","data","data2","setData","dataa","setDataa","columns","setColumns","handleOnDragEnd","result","console","log","destination","source","draggableId","droppableId","items","reorderedItem","splice","index","Object","entries","map","column","provided","droppableProps","innerRef","item","dragHandleProps"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport { Droppable, DragDropContext, Draggable } from 'react-beautiful-dnd'\r\nfunction Test() {\r\n\r\n    const data1 = [\r\n        { id: '1', data: 1 },\r\n        { id: '2', data: 2 },\r\n        { id: '3', data: 3 }\r\n    ]\r\n    const data2 = [\r\n        { id: '4', data: 4 },\r\n        { id: '5', data: 5 },\r\n        { id: '6', data: 6 }\r\n    ]\r\n\r\n    const [data, setData] = useState(data1)\r\n    const [dataa, setDataa] = useState(data2)\r\n\r\n    const [columns, setColumns] = useState({\r\n        ['1'] : {\r\n            data: data1\r\n        },\r\n        ['2'] : {\r\n            data: data2\r\n        }\r\n    })\r\n\r\n    const handleOnDragEnd = (result) => {\r\n        console.log(result  )\r\n        if(!result.destination) return;\r\n        if(result.source.draggableId !== result.destination.droppableId){\r\n            \r\n               \r\n            \r\n        }\r\n\r\n        const items = data;\r\n        const [reorderedItem ] = items.splice(result.source.index, 1)\r\n        items.splice(result.destination.index, 0, reorderedItem)\r\n\r\n        setData(items)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <DragDropContext onDragEnd={handleOnDragEnd} >\r\n                {Object.entries(columns).map(([id, column]) => {\r\n                    return(\r\n                        <div>\r\n                            <Droppable droppableId = {id} key = {id}>\r\n                                {(provided) => {\r\n                                    return(\r\n                                        <div\r\n                                        {...provided.droppableProps}\r\n                                        ref = {provided.innerRef}\r\n                                        >\r\n                                            {\r\n                                                column.data.map( item => {\r\n                                                    (provided) => {\r\n                                                        return(\r\n                                                            <div\r\n                                                            {...provided.droppableProps}\r\n                                                            {...provided.dragHandleProps}\r\n                                                            ref = {provided.innerRef}\r\n                                                            >\r\n                                                                {item.data}\r\n                                                            </div>\r\n                                                        )\r\n                                                    }\r\n                                                } )\r\n                                            }\r\n                                        </div>\r\n                                    )\r\n                                }}\r\n                            </Droppable>\r\n                        </div>\r\n                    )\r\n                } )}\r\n                \r\n            </DragDropContext>\r\n\r\n            \r\n\r\n                        \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Test\r\n\r\n// return items.map((item, index) => (\r\n//     <Draggable\r\n//       // adding a key is important!\r\n//       key={item.id}\r\n//       draggableId={item.id}\r\n//       index={index}\r\n//     >\r\n//       {(provided, snapshot) => (\r\n//         <div\r\n//           ref={provided.innerRef}\r\n//           {...provided.draggableProps}\r\n//           {...provided.dragHandleProps}\r\n//         >\r\n//           {item.content}\r\n//         </div>\r\n//       )}\r\n//     </Draggable>\r\n//   ));\r\n\r\n"]},"metadata":{},"sourceType":"module"}